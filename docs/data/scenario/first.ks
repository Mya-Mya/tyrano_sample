*start

[title name="You Programmer!"]
[hidemenubutton]
[wait time=200]
[freeimage layer="base"]


function setup() {[r]
_　createCanvas(windowWidth, windowHeight);[r]
_　resetTarget();[r]
_　resetRocket();[l][r]

_　NSlider = createSlider(0, 5, 1.5, 0.01).position(100, 0);[l][r]
_　frameRate(30);[r]
}[l][r]
function draw() {[l][r]
_　background("whitesmoke");[l][r]
_　drawTarget();[l][r]
_　updateTarget();[l][r]
_　drawRocket();[l][r]
_　updateRocket();[l][r]
_　checkCollision();[l][r]
}[l][r]

function drawAircraft(x, y, theta, positionLog, cname) {[l][r]
_　push();[l][r]
_　noStroke();[l][r]
_　fill(cname);[l][r]
_　const thetaL = theta - 2;[l][r]
_　const thetaR = theta + 2;[l][r]
_　triangle([l][r]
_　　x + cos(theta) * 20,[l][r]
_　　y + sin(theta) * 20,[l][r]
_　　x + cos(thetaL) * 10,[l][r]
_　　y + sin(thetaL) * 10,[l][r]
_　　x + cos(thetaR) * 10,[l][r]
_　　y + sin(thetaR) * 10[l][r]
_　);[l][r]
_　positionLog.forEach((r) => circle(r(0), r(1), 3));[l][r]
_　pop();[l][r]
}

let xt, yt, vxt, vyt, vt;[l][r]
let randomNoise = 0.05;[l][r]
let tPoistionLog = ();[l][r]
function drawTarget() {[l][r]
_　drawAircraft(xt, yt, atan2(vyt, vxt), tPoistionLog, "mediumvioletred");[l][r]
}[l][r]

function updateTarget() {[l][r]
_　if (keyCode == 32) {[l][r]
_　　xt = mouseX;[l][r]
_　　yt = mouseY;[l][r]
_　} else if (vyt != 0 || vyt != 0) {[l][r]
_　　xt += (vxt * deltaTime) / 1000;[l][r]
_　　yt += (vyt * deltaTime) / 1000;[l][r]
_　　vxt += random(-vxt, vxt) * randomNoise;[l][r]
_　　vyt += random(-vyt, vyt) * randomNoise;[l][r]
_　　vyt += 0.1;[l][r]
_　}[l][r]

_　tPoistionLog.push((xt, yt));[l][r]
}[l][r]

function resetTarget() {[l][r]
_　xt = width * 0.8;[l][r]
_　yt = height - 30;[l][r]
_　vt = 0;[l][r]
_　vxt = 0;[l][r]
_　vyt = -vt;[l][r]
}[l][r]

function startTarget() {[l][r]
_　vxt = mouseX - xt;[l][r]
_　vyt = mouseY - yt;[l][r]
_　tPoistionLog = ();[l][r]
}[l][r]

let xr, yr, thetar, vr;[l][r]
let rPositionLog = ();[l][r]
let rocketState;[l][r]
const STOP = 0;[l][r]
const ACC = 1;[l][r]
const DFLIGHT = 2;[l][r]
const ROCKET_COLOR = {[l][r]
_　(STOP): "slategray",[l][r]
_　(ACC): "steelblue",[l][r]
_　(DFLIGHT): "sandybrown",[l][r]
};[l][r]
let goalSigma;[l][r]
let beforeDistance2;[l][r]
let NSlider;[l][r]
function drawRocket() {[l][r]
_　drawAircraft(xr, yr, thetar, rPositionLog, ROCKET_COLOR(rocketState));[l][r]
_　text("N=" + nf(NSlider.value(), 1, 1), 10, 10);[l][r]
}[l][r]

function resetRocket() {[l][r]
_　xr = width * 0.2;[l][r]
_　yr = height - 30;[l][r]
_　vr = 0;[l][r]
_　thetar = -0.5 * PI;[l][r]
_　rocketState = STOP;[l][r]
}[l][r]

function updateRocket() {[l][r]
_　let dt = deltaTime / 1000;[l][r]

_　if (rocketState == ACC) {[l][r]
_　　//加速のみ[l][r]
_　　if (vr * vr < (vxt * vxt + vyt * vyt) * 2) vr += 20;[l][r]
_　　else {[l][r]
_　　　//比例航法はじめ[l][r]
_　　　rocketState = DFLIGHT;[l][r]
_　　　goalSigma = getSigma();[l][r]
_　　}[l][r]
_　}[l][r]
_　if (rocketState == DFLIGHT) {[l][r]
_　　//比例航法[l][r]
_　　let sigma = getSigma(); //目視線角[l][r]
_　　let deltaSigma = sigma - goalSigma; //目視線角の変化[l][r]
_　　text("Δσ=" + nf(deltaSigma, 1, 4), 10, 40);[l][r]
_　　const deltaTheta = NSlider.value() * deltaSigma; //経路角の変化[l][r]
_　　text("ΔΘ=" + nf(deltaTheta, 1, 4), 10, 50);[l][r]
_　　thetar += deltaTheta;[l][r]

_　}[l][r]
_　if (keyCode == 83) {[l][r]
_　　//S[l][r]
_　　goalSigma = getSigma();[l][r]
_　}[l][r]
_　if (keyCode == UP_ARROW) vr *= 1.04;[l][r]
_　if (keyCode == DOWN_ARROW) vr /= 1.04;[l][r]

_　text("vr="+nf(vr),200,200)[l][r]

_　let deltaR = vr * dt;[l][r]
_　xr += cos(thetar) * deltaR;[l][r]
_　yr += sin(thetar) * deltaR;[l][r]
_　rPositionLog.push((xr, yr));[l][r]
}[l][r]

function startRocket() {[l][r]
_　vr = 0; //sqrt(pow(mouseY - yr, 2) + pow(mouseX - xr, 2))[l][r]
_　thetar = atan2(mouseY - yr, mouseX - xr);[l][r]

_　rocketState = ACC;[l][r]
_　rPositionLog = ();[l][r]
}[l][r]

function getSigma() {[l][r]
_　// 目視線角を求める。[l][r]
_　const alpha = atan2(yt - yr, xt - xr) % TWO_PI;[l][r]
_　let sigma = alpha - thetar;[l][r]
_　sigma = sigma % TWO_PI;[l][r]
_　return sigma;[l][r]
}[l][r]
function checkCollision() {[l][r]
_　if (pow(xr - xt, 2) + pow(yr - yt, 2) < 200) {[l][r]
_　　print("Collide");[l][r]
_　　beforeDistance2 = undefined;[l][r]
_　　resetTarget();[l][r]
_　　resetRocket();[l][r]
_　}[l][r]
}[l][r]
function keyPressed() {[l][r]
_　if (keyCode == 84) {[l][r]
_　　//T[l][r]
_　　print("Launch Target");[l][r]
_　　startTarget();[l][r]
_　}[l][r]
_　if (keyCode == 82) {[l][r]
_　　//R[l][r]
_　　print("Launch Rocket");[l][r]
_　　startRocket();[l][r]
_　}[l][r]
_　if (keyCode == 13) {[l][r]
_　　//Enter[l][r]
_　　print("Stop&Reset Target");[l][r]
_　　resetTarget();[l][r]
_　　resetRocket();[l][r]
_　　tPoistionLog = ();[l][r]
_　　rPositionLog = ();[l][r]
_　}[l][r]
}[l][r]


[link target=*tag_detail] →これはなに？ [endlink][r]
[s]

*tag_detail

ミサイルを迎撃するシステムです。TでTargetを発射させ、その後にRで迎撃Rocketを発射させます。
Enterでリセットします。

[l][cm]
[jump target=*start]

*tag_run

[bg storage=run.jpg time=500]

[cm]
メロスは黒い風のように走った。[l][r]
陽は、ゆらゆら地平線に没し、まさに最後の一片の残光も、消えようとした時、メロスは疾風の如く刑場に突入した。間に合った。[r]

【 GOOD END 】[l][cm]

[jump target=*start]
