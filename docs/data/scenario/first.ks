*start

[title name="You Programmer!"]
[hidemenubutton]
[wait time=200]
[freeimage layer="base"]


function setup() {[r]
_　createCanvas(windowWidth, windowHeight);[r]
_　resetTarget();[r]
_　resetRocket();[r]
_　NSlider = createSlider(0, 5, 1.5, 0.01).position(100, 0);[r]
_　frameRate(30);[r]
}[l][r]
function draw() {[r]
_　background("whitesmoke");[r]
_　drawTarget();[r]
_　updateTarget();[r]
_　drawRocket();[r]
_　updateRocket();[r]
_　checkCollision();[r]
}[l][r]

function drawAircraft(x, y, theta, positionLog, cname) {[r]
_　push();[r]
_　noStroke();[r]
_　fill(cname);[r]
_　const thetaL = theta - 2;[r]
_　const thetaR = theta + 2;[r]
_　triangle([l][r]
_　　x + cos(theta) * 20,[r]
_　　y + sin(theta) * 20,[r]
_　　x + cos(thetaL) * 10,[r]
_　　y + sin(thetaL) * 10,[r]
_　　x + cos(thetaR) * 10,[r]
_　　y + sin(thetaR) * 10[l][r]
_　);[r]
_　positionLog.forEach((r) => circle(r(0), r(1), 3));[r]
_　pop();[r]
}[l]

let xt, yt, vxt, vyt, vt;[r]
let randomNoise = 0.05;[r]
let tPoistionLog = ();[r]
function drawTarget() {[r]
_　drawAircraft(xt, yt, atan2(vyt, vxt), tPoistionLog, "mediumvioletred");[r]
}[l][r]

function updateTarget() {[r]
_　if (keyCode == 32) {[r]
_　　xt = mouseX;[r]
_　　yt = mouseY;[r]
_　}[l] else if (vyt != 0 || vyt != 0) {[r]
_　　xt += (vxt * deltaTime) / 1000;[r]
_　　yt += (vyt * deltaTime) / 1000;[r]
_　　vxt += random(-vxt, vxt) * randomNoise;[r]
_　　vyt += random(-vyt, vyt) * randomNoise;[r]
_　　vyt += 0.1;[r]
_　}[l][r]

_　tPoistionLog.push((xt, yt));[r]
}[l][r]

function resetTarget() {[r]
_　xt = width * 0.8;[r]
_　yt = height - 30;[r]
_　vt = 0;[r]
_　vxt = 0;[r]
_　vyt = -vt;[r]
}[l][r]

function startTarget() {[r]
_　vxt = mouseX - xt;[r]
_　vyt = mouseY - yt;[r]
_　tPoistionLog = ();[r]
}[l][r]

let xr, yr, thetar, vr;[r]
let rPositionLog = ();[r]
let rocketState;[r]
const STOP = 0;[r]
const ACC = 1;[r]
const DFLIGHT = 2;[r]
const ROCKET_COLOR = {[l][r]
_　(STOP): "slategray",[r]
_　(ACC): "steelblue",[r]
_　(DFLIGHT): "sandybrown",[r]
}[l];[r]
let goalSigma;[r]
let beforeDistance2;[r]
let NSlider;[r]
function drawRocket() {[r]
_　drawAircraft(xr, yr, thetar, rPositionLog, ROCKET_COLOR(rocketState));[r]
_　text("N=" + nf(NSlider.value(), 1, 1), 10, 10);[r]
}[l][r]

function resetRocket() {[r]
_　xr = width * 0.2;[r]
_　yr = height - 30;[r]
_　vr = 0;[r]
_　thetar = -0.5 * PI;[r]
_　rocketState = STOP;[r]
}[l][r]

function updateRocket() {[r]
_　let dt = deltaTime / 1000;[r]

_　if (rocketState == ACC) {[r]
_　　//加速のみ[l][r]
_　　if (vr * vr < (vxt * vxt + vyt * vyt) * 2) vr += 20;[r]
_　　else {[l][r]
_　　　//比例航法はじめ[l][r]
_　　　rocketState = DFLIGHT;[r]
_　　　goalSigma = getSigma();[r]
_　　}[l][r]
_　}[l][r]
_　if (rocketState == DFLIGHT) {[r]
_　　//比例航法[l][r]
_　　let sigma = getSigma(); //目視線角[l][r]
_　　let deltaSigma = sigma - goalSigma; //目視線角の変化[l][r]
_　　text("Δσ=" + nf(deltaSigma, 1, 4), 10, 40);[r]
_　　const deltaTheta = NSlider.value() * deltaSigma; //経路角の変化[l][r]
_　　text("ΔΘ=" + nf(deltaTheta, 1, 4), 10, 50);[r]
_　　thetar += deltaTheta;[r]

_　}[l][r]
_　if (keyCode == 83) {[r]
_　　//S[l][r]
_　　goalSigma = getSigma();[r]
_　}[l][r]
_　if (keyCode == UP_ARROW) vr *= 1.04;[r]
_　if (keyCode == DOWN_ARROW) vr /= 1.04;[r]

_　text("vr="+nf(vr),200,200)[l][r]

_　let deltaR = vr * dt;[r]
_　xr += cos(thetar) * deltaR;[r]
_　yr += sin(thetar) * deltaR;[r]
_　rPositionLog.push((xr, yr));[r]
}[l][r]

function startRocket() {[r]
_　vr = 0; //sqrt(pow(mouseY - yr, 2) + pow(mouseX - xr, 2))[l][r]
_　thetar = atan2(mouseY - yr, mouseX - xr);[r]

_　rocketState = ACC;[r]
_　rPositionLog = ();[r]
}[l][r]

function getSigma() {[r]
_　// 目視線角を求める。[l][r]
_　const alpha = atan2(yt - yr, xt - xr) % TWO_PI;[r]
_　let sigma = alpha - thetar;[r]
_　sigma = sigma % TWO_PI;[r]
_　return sigma;[r]
}[l][r]
function checkCollision() {[r]
_　if (pow(xr - xt, 2) + pow(yr - yt, 2) < 200) {[r]
_　　print("Collide");[r]
_　　beforeDistance2 = undefined;[r]
_　　resetTarget();[r]
_　　resetRocket();[r]
_　}[l][r]
}[l][r]
function keyPressed() {[r]
_　if (keyCode == 84) {[r]
_　　//T[l][r]
_　　print("Launch Target");[r]
_　　startTarget();[r]
_　}[l][r]
_　if (keyCode == 82) {[r]
_　　//R[l][r]
_　　print("Launch Rocket");[r]
_　　startRocket();[r]
_　}[l][r]
_　if (keyCode == 13) {[r]
_　　//Enter[l][r]
_　　print("Stop&Reset Target");[r]
_　　resetTarget();[r]
_　　resetRocket();[r]
_　　tPoistionLog = ();[r]
_　　rPositionLog = ();[r]
_　}[l][r]
}[l][r]


[link target=*tag_detail] →これはなに？ [endlink][r]
[s]

*tag_detail

ミサイルを迎撃するシステムです。TでTargetを発射させ、その後にRで迎撃Rocketを発射させます。
Enterでリセットします。

[l][cm]
[jump target=*start]

*tag_run

[bg storage=run.jpg time=500]

[cm]
メロスは黒い風のように走った。[l][r]
陽は、ゆらゆら地平線に没し、まさに最後の一片の残光も、消えようとした時、メロスは疾風の如く刑場に突入した。間に合った。[r]

【 GOOD END 】[l][cm]

[jump target=*start]
